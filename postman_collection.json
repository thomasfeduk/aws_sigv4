{
	"info": {
		"_postman_id": "77bef605-eebb-45fb-942a-3eb1c4d9a1ca",
		"name": "AWS Sigv4 - Lambda Invoke",
		"description": "Instructions:\n\n1. Click \"the Pre-request Script\"\n2. Set the declared script variables as desired\n3. Ensure the following env variables are set:\n    a. `AWS-AccessKeyId`\n    b. `AWS-SecretAccessKey`\n    c. `AWS-SessionToken`\n    d. `AWS-Region`\n4. Open the Postman \"Console\" (bottom left next to find)\n5. Click \"Send\"",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "LambdaInvoke",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"class AWSSigner {\r",
							"    constructor(access_key, secret_key, session_token, region, service) {\r",
							"        this.access_key = access_key;\r",
							"        this.secret_key = secret_key;\r",
							"        this.session_token = session_token;\r",
							"        this.region = region;\r",
							"        this.service = service;\r",
							"    }\r",
							"\r",
							"    static sign(key, message) {\r",
							"        if (typeof key === \"string\") {\r",
							"            key = CryptoJS.enc.Utf8.parse(key);\r",
							"        }\r",
							"        let messageWordArray = CryptoJS.enc.Utf8.parse(message);\r",
							"        return CryptoJS.HmacSHA256(messageWordArray, key);\r",
							"    }\r",
							"\r",
							"    get_signature_key(date_stamp) {\r",
							"        let k_date = AWSSigner.sign(CryptoJS.enc.Utf8.parse(\"AWS4\" + this.secret_key), date_stamp);\r",
							"        let k_region = AWSSigner.sign(k_date, this.region);\r",
							"        let k_service = AWSSigner.sign(k_region, this.service);\r",
							"        let k_signing = AWSSigner.sign(k_service, \"aws4_request\");\r",
							"        return k_signing;\r",
							"    }\r",
							"\r",
							"    create_canonical_request(method, uri, querystring, headers, payload) {\r",
							"        let signed_headers_list = Object.keys(headers).map(h => h.toLowerCase()).sort();\r",
							"        let signed_headers = signed_headers_list.join(';');\r",
							"        let payload_hash = CryptoJS.SHA256(payload).toString(CryptoJS.enc.Hex);\r",
							"        let canonical_headers = Object.entries(headers).sort(([a], [b]) => a.toLowerCase().localeCompare(b.toLowerCase())).map(([key, value]) => `${key}:${value}\\n`).join('');\r",
							"        return `${method}\\n${uri}\\n${querystring}\\n${canonical_headers}\\n${signed_headers}\\n${payload_hash}`;\r",
							"    }\r",
							"\r",
							"    get_string_to_sign(amz_date, date_stamp, canonical_request) {\r",
							"        let credential_scope = `${date_stamp}/${this.region}/${this.service}/aws4_request`;\r",
							"        let string_to_sign = `AWS4-HMAC-SHA256\\n${amz_date}\\n${credential_scope}\\n${CryptoJS.SHA256(canonical_request).toString(CryptoJS.enc.Hex)}`;\r",
							"        return [string_to_sign, credential_scope];\r",
							"    }\r",
							"\r",
							"    get_authorization_header(amz_date, date_stamp, canonical_request) {\r",
							"        let [string_to_sign, credential_scope] = this.get_string_to_sign(amz_date, date_stamp, canonical_request);\r",
							"        let signing_key = this.get_signature_key(date_stamp);\r",
							"        let signature = AWSSigner.sign(signing_key, string_to_sign);\r",
							"        return `AWS4-HMAC-SHA256 Credential=${this.access_key}/${credential_scope}, SignedHeaders=host;x-amz-date;x-amz-security-token, Signature=${signature}`;\r",
							"    }\r",
							"}\r",
							"\r",
							"class AWSLambdaClient {\r",
							"    constructor(signer) {\r",
							"        this.signer = signer;\r",
							"        this.endpoint = `https://lambda.${signer.region}.amazonaws.com/2015-03-31`;\r",
							"        this.host = `lambda.${signer.region}.amazonaws.com`;\r",
							"    }\r",
							"\r",
							"    _get_headers({ method, uri, payload = \"\", headers_additional = null }) {\r",
							"        let t = new Date();\r",
							"        // Debugging\r",
							"        // var specificDateStr = \"2023-09-18T00:21:37.356Z\"; // 'Z' indicates it's UTC\r",
							"        // var t = new Date(specificDateStr);\r",
							"        let amz_date = t.toISOString().replace(/[:-]|\\.\\d{3}/g, \"\");\r",
							"        let date_stamp = t.toISOString().split('T')[0].replace(/-/g, \"\");\r",
							"\r",
							"        let headers = {\r",
							"            'host': this.host,\r",
							"            'x-amz-date': amz_date,\r",
							"            'x-amz-security-token': ''\r",
							"        };\r",
							"\r",
							"        // Add session token if available\r",
							"        if (this.signer.session_token) {\r",
							"            headers['x-amz-security-token'] = this.signer.session_token;\r",
							"        }\r",
							"\r",
							"        let canonical_request = this.signer.create_canonical_request(method, uri, \"\", headers, payload);\r",
							"        headers[\"Authorization\"] = this.signer.get_authorization_header(amz_date, date_stamp, canonical_request);\r",
							"        delete headers[\"host\"];\r",
							"\r",
							"        if (!this.signer.session_token) {\r",
							"            delete headers[\"x-amz-security-token\"];\r",
							"        }\r",
							"        // Inject the additional headers if passed outside of the authorization signing process\r",
							"        if (headers_additional) {\r",
							"            Object.assign(headers, headers_additional);\r",
							"        }\r",
							"\r",
							"        return headers;\r",
							"    }\r",
							"\r",
							"    lambda_list_functions(callback) {\r",
							"        let method = \"GET\";\r",
							"        let uri = \"/2015-03-31/functions/\";\r",
							"        let headers = this._get_headers({method: method, uri: uri});\r",
							"\r",
							"        const requestParams = {\r",
							"            url: `${this.endpoint}/functions/`,\r",
							"            method: method,\r",
							"            header: headers,\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: ''\r",
							"            }\r",
							"        };\r",
							"\r",
							"        pm.sendRequest(requestParams, function (err, response) {\r",
							"            if (err) {\r",
							"                console.error('Error making HTTP call to AWS:', err);\r",
							"            } else {\r",
							"                callback(err, response)\r",
							"            }\r",
							"        });\r",
							"    }\r",
							"\r",
							"    lambda_invoke(function_name, payload, callback) {\r",
							"        let method = \"POST\";\r",
							"        let uri = `/2015-03-31/functions/${function_name}/invocations`;\r",
							"        let payload_json = JSON.stringify(payload);\r",
							"        let headers = this._get_headers({ method: method, uri: uri, payload: payload_json });\r",
							"\r",
							"        let requestParams = {\r",
							"            url: `${this.endpoint}/functions/${function_name}/invocations`,\r",
							"            method: method,\r",
							"            header: headers,\r",
							"            body: {\r",
							"                mode: 'raw',\r",
							"                raw: payload_json\r",
							"            }\r",
							"        };\r",
							"\r",
							"        pm.sendRequest(requestParams, function (err, response) {\r",
							"            if (err) {\r",
							"                console.error('Error making HTTP call to AWS:', err);\r",
							"            } else {\r",
							"                callback(err, response)\r",
							"            }\r",
							"        });\r",
							"    }\r",
							"}\r",
							"\r",
							"// Usage in Postman pre-request script:\r",
							"let signer = new AWSSigner(\r",
							"    pm.environment.get(\"AWS-AccessKeyId\"),\r",
							"    pm.environment.get(\"AWS-SecretAccessKey\"),\r",
							"    pm.environment.get(\"AWS-SessionToken\"),\r",
							"    pm.environment.get(\"AWS-Region\"),\r",
							"    'lambda');\r",
							"\r",
							"let client = new AWSLambdaClient(signer);\r",
							"\r",
							"client.lambda_invoke(pm.environment.get(\"FunctionName\"), JSON.parse(pm.environment.get(\"FunctionPayload\")), (err, response) => {\r",
							"    if (response) {\r",
							"        console.log('Lambda Response: '+ response.code + ' ' + response.status);\r",
							"        console.log(response.text());\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "Instructions:\r\n\r\n1. Ensure the following env variables are set:\r\n    a. AWS-AccessKeyId\r\n    b. AWS-SecretAccessKey\r\n    c. AWS-SessionToken\r\n    d. AWS-Region\r\n    e. FunctionName\r\n    f. FunctionPayload\r\n2. Click \"Send\"\r\n3. Open the Postman \"Console\" (bottom left) to see the function output."
				},
				"url": {
					"raw": "http://localhost",
					"protocol": "http",
					"host": [
						"localhost"
					]
				}
			},
			"response": []
		}
	]
}